pipeline {
    agent any
    environment {
        SONARQUBE_URL = 'http://localhost:9000' 
        SONAR_AUTH_TOKEN = credentials('sonarqube')
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/salibouaziz/verificationTool.git'
            }
        }
     
    stage('Test SonarQube Connection') {
            steps {
                script {
                    // Test connection to SonarQube using curl
                    def sonarUrl = 'http://localhost:9000'
                    def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${sonarUrl}", returnStdout: true).trim()

                    // Check if the response is 200 (OK)
                    if (response == '200') {
                        echo "SonarQube is accessible at ${sonarUrl}"
                    } else {
                        error "SonarQube connection failed with response code ${response}"
                    }
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv(sonarqube) {
                    script {
                        bat 'sonar-scanner -Dsonar.projectKey=test -Dsonar.host.url=http://localhost:9000'
                    }
                }
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    bat 'docker build -t salibou/verification-tool:latest .'
                }
            }
        }

        stage('Run Docker Container with Mounted Volumes') {
            steps {
                script {
                    def indexPath = "C:\\Users\\sally\\OneDrive\\Bureau\\index.txt"
                    def packagePath = "C:\\Users\\sally\\OneDrive\\Bureau\\A591-09626-0100000_08415_ELV_00412_No_OS\\A591-09626-0100000"
                    
                    bat """
                    docker run ^
                    -v ${indexPath}:/app/index.txt ^
                    -v ${packagePath}:/app/package ^
                    salibou/verification-tool:latest
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
               script {
                    // Use withCredentials to pass the Docker Hub credentials
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                        // Use the correct syntax for environment variables in Windows batch script
                        bat 'docker login -u bouaziz.sali@enis.tn -p %dockerhub%'
                    }
                    // Push the Docker image
                    bat 'docker push salibou/verification-tool:latest'
                }
            }
        }

        stage('Post Build Actions') {
            steps {
                echo 'Build, run with mounted  '
            }
        }
    }
}
